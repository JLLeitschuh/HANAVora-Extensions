package org.apache.spark.sql.catalyst.analysis

import java.util.Locale

import org.apache.spark.sql.catalyst.expressions.tablefunctions.{DescribeTableFunction, DescribeTableIfExistsTableFunction}

import scala.collection.mutable
import scala.reflect.ClassTag

/** A registry which can register and lookup functions. */
trait TableFunctionRegistry {
  /** Looks up the given function name.
   *
   * Performs case insensitive lookup for the given name.
   * @param name The name of the function that is searched
   * @return [[scala.Some]][[TableFunction]] if the function exits, [[scala.None]] otherwise.
   */
  def lookupFunction(name: String): Option[TableFunction]

  /** Associates the given function with the given name.
   *
   * @param name The name to register the function
   * @param tableFunction The table function to register
   */
  def registerFunction(name: String, tableFunction: TableFunction): Unit
}

/** An implementation of the [[TableFunctionRegistry]] trait.
 *
 * Overrides functions if the same name is registered twice.
 * Treats function names case insensitive.
 */
class SimpleTableFunctionRegistry extends TableFunctionRegistry {
  private val functions = new mutable.HashMap[String, TableFunction]

  override def lookupFunction(name: String): Option[TableFunction] = {
    functions.get(name.toLowerCase(Locale.ENGLISH))
  }

  override def registerFunction(name: String, tableFunction: TableFunction): Unit = {
    functions += name.toLowerCase(Locale.ENGLISH) -> tableFunction
  }
}

/** The global table function registry. */
object TableFunctionRegistry extends SimpleTableFunctionRegistry {
  /** Registers the given class as provider for table functions.
    *
    * @param name Name to associate the functions with.
    * @param classTag Implicit class tag generated by the compiler.
    * @tparam C Type of the class.
    */
  def function[C <: TableFunction](name: String)(implicit classTag: ClassTag[C]): Unit = {
    val f = classTag.runtimeClass.newInstance().asInstanceOf[TableFunction]
    registerFunction(name, f)
  }

  function[DescribeTableFunction]("describe_table")
  function[DescribeTableIfExistsTableFunction]("describe_table_if_exists")
}

